-- Descripciones --
QuickSort: Peor caso es O(n^2), a pesar que su peor caso es lento, es frecuentemente la mejor opción practica en el caso promedio siendo O(nlogn). Se basa en el paradigma de divide y conquista (divide & conquer) al igual que mergeSort, hay que considerar que los peores casos para quicksort es que los arreglos ya estén ordenados (tanto de forma ascendente como descendente ) 
Otros problemas con quicksort: es sensible a la distribución de datos, cuando hay elementos repetidos o cercanos entre si pueden haber: malas particiones, comparaciones innecesarias, 

	Explicación aproximaciones de tiempo:
	T(n) = C * n^2 (Siendo C el costo constante por operación elemental, o sea cuánto tiempo real toma cada operación básica)
	si n = 100000 y t = 28000 ms
	T(100000) = C * (100000)^2 -> C = 28000 / (100000)^2 =  2.8 * 10^-6 
	 
	Así estimamos que T(1000000) = 2.800.000ms = 46 min y T(10000000) = 280.000.000ms = 77 horas

introsort: 

Notas:
* g++ sorts/heap.cpp sorts/quicksort.cpp main.cpp -o a
* Comprobar por qué los primeros 50 arreglos del quicksort descendente son 100ms más rapidos que el resto de arreglos
* Tener en cuenta: Este heapsort implementa un maxheap y no un minheap como el que muestra el profe en el ppt
* Tener en cuenta que se está usando la flag -O3 al compilar

-- Comparaciones --

Rango de números: 0 - 500.000
Tamaños de arreglos: 10, 100, 1.000, 10.000, 100.000, 1.000.000, 10.000.000 
Cantidad de arreglos testeados por algoritmo: 100

Tiempos promedio (todos en ms):
	- Arreglos Aleatorios:
		- heapSort: 0.00042603, 0.00616826, 0.0616511, 0.735662, 9.26665, 119.646, 1939.05 ms 
		- quickSort: 0.00019239, 0.00271011, 0.0366828, 0.488155, 5.93696, 70.0742, 815.858
		- STL sort: 0.00014943, 0.00270442, 0.0331546, 0.421855, 5.28987, 62.5495, 727.147
		- QuickSortRandom: 0.00298035, 0.0399941, 0.398902, 3.66027, 37.727, 390.481, 3936.6
		- mergeinsertionSort: 0.0001419, 0.00224196, 0.0351345, 0.512291, 6.5969, 80.0306, 932.247
		- mergesort: 0.00022357, 0.00306839, 0.0444755, 0.574855, 7.34587, 88.6231, 989.348
		- insertionSort: 0.00014429, 0.00193759, 0.082863, 6.93874, 659.491, 65949*, 6594910* (calcular 2)  O(n²) -> C = 659.491/(100000)² = 0.0000000659

	- Arreglos ordenados en orden ascendente: 
		- HeapSort:  9.16e-05, 0.00092445, 0.0245757, 0.440529, 4.82991, 52.7296, 586.573
		- QuickSort: 8.537e-05, 0.00305874, 0.247773, 23.8087, 2481.59, 248100*, 24810000 (calcular 2)   O(n²) -> C = 0.0000002481
		- Sort (STL): 4.832e-05, 0.00031174, 0.00422537, 0.0537534, 0.597158, 6.98417, 86.7627
		- QuickSortRandom: 0.00349121, 0.0358748, 0.339942, 4.73374, 61.3074, 1827.1, (Calcular 1)
		- mergeinsertionSort: 4.836e-05, 0.00030206, 0.00425567, 0.0553565, 0.689751, 9.23823, 126.685
		- mergeSort: 8.213e-05, 0.00026066, 0.00183742, 0.0202312, 0.220803, 2.49907, 27.0341
		- InsertionSort: 4.85e-05, 0.00011384, 0.00076772, 0.00697973, 0.0697288, 0.960569, 9.95646
		
		
	- Arreglos ordenados en orden descendente:
		- HeapSort: 8.455e-05, 0.00081758, 0.0200874, 0.488517, 5.401, 62.1919, 974.489
		- QuickSort: 8.565e-05, 0.00311789, 0.214689, 19.9931, 2767.91, 276700*, 27670000* (calcular 2)  O(n²) -> C = 0.0000002767
		- Sort (STL): 9.188e-05, 0.00045233, 0.00296143, 0.0384211, 0.447895, 7.08807, 96.1349
		- QuickSortRandom: 0.00584584, 0.0587516, 0.414323, 4.39686, 42.8719, 545.552, 4893.43
		- mergeinsertionSort: 0.00015089, 0.00179551, 0.0238554, 0.152024, 2.21928, 28.651, 284.208
		- mergeSort: 0.00016449, 0.00195614, 0.012023, 0.234106, 2.27419, 22.6458, 294.936
		- InsertionSort: 7.905e-05, 0.00469863, 0.295544, 25.3377, 1854.51, 185400*, 18540000* (calcular 2) O(n²) -> C = 0.0000001854
		
	- Arreglos con todos los elementos iguales:
		- HeapSort: 6.931e-05, 0.00033203, 0.003778, 0.0295245, 0.294784, 3.14765, 37.4403 
		- QuickSort: 0.00022936, 0.00314972, 0.26722, 24.7819, 3259.38, 325900*, 32590000* (calcular 2) O(n²) -> C = 0.0000003259 
		- Sort (STL): 5.658e-05, 0.00046249, 0.00381944, 0.0515763, 0.62765, 8.42094, 122.959
		- QuickSortRandom: 0.00482982, 0.0595563, 0.899436, 40.0374, 3159.71, 315900*, 31590000* (calcular 2)
		- mergeinsertionSort: 6.996e-05, 0.00035486, 0.00455966, 0.0713852, 1.34818, 15.5091, 212.777
		- mergeSort: 0.00013805, 0.00058914, 0.00429605, 0.0422489, 0.3824, 3.65084, 44.1407
		- InsertionSort: 6.591e-05, 0.00015959, 0.00097256, 0.019148, 0.121656, 1.82988, 15.3272

	- Arreglos con la primera mitad de los elementos ordenados:
		- HeapSort: 0.00019135, 0.00406105, 0.0610745, 0.871837, 11.7956, 248.185, 4286.15 
		- QuickSort: 0.00017581, 0.00308152, 0.162098, 11.1747, 460.96, 680.071, 2995.76 
		- Sort (STL): 0.00015787, 0.00200117, 0.0239788, 0.35285, 4.48129, 67.7568, 1004.2
		- QuickSortRandom: 0.00437525, 0.0670575, 0.516854, 6.56051, 91.5393, 1059.46, 12355* (calcular 1) O(nlogn) -> C = 0.0001765
		- mergeinsertionSort: 0.00017878, 0.00178722, 0.0254193, 0.415784, 6.21499, 79.4555, 1010.13
		- mergeSort:0.00024699, 0.00270572, 0.0297609, 0.487982, 6.27177, 79.7717, 948.302 
		- InsertionSort: 0.00018603, 0.00164996, 0.0347659, 4.59133, 456.892, 45600*, 4560000* (calcular 2) O(n²) -> C = 0.0000000456

	- Arreglos con la segunda mitad de los elementos ordenados:
		- HeapSort: 0.00024703, 0.00342332, 0.0535082, 0.694674, 9.13595, 150.419, 2717.66
		- QuickSort: 0.00014759, 0.00443244, 0.309402, 32.3229, 4232.27, 423200*, 42320000* (calcular 2) O(n²) -> C = 0.0000004232 
		- Sort (STL): 0.0001438, 0.00188333, 0.0225369, 0.319333, 4.38304, 55.3902, 749.643
		- QuickSortRandom: 0.00446088, 0.0713389, 0.613028, 8.36747, 143.222, 3021.4, (calcular 1)
		- mergeinsertionSort: 0.00013239, 0.00227596, 0.0247322, 0.447353, 6.19536, 80.7185, 1023.26
		- mergeSort: 0.00027537, 0.00304873, 0.0392683, 0.536376, 6.69359, 78.887, 934.976 
		- InsertionSort: 0.00013689, 0.00128915, 0.0614888, 4.88764, 465.824, 46500*, 4650000* (calcular 2) O(n²) -> C = 0.0000000465
