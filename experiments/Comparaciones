-- Descripciones --
QuickSort: Peor caso es O(n^2), a pesar que su peor caso es lento, es frecuentemente la mejor opción practica en el caso promedio siendo O(nlogn). Se basa en el paradigma de divide y conquista (divide & conquer) al igual que mergeSort, hay que considerar que los peores casos para quicksort es que los arreglos ya estén ordenados (tanto de forma ascendente como descendente ) 
Otros problemas con quicksort: es sensible a la distribución de datos, cuando hay elementos repetidos o cercanos entre si pueden haber: malas particiones, comparaciones innecesarias, 

	Explicación aproximaciones de tiempo:
	T(n) = C * n^2 (Siendo C el costo constante por operación elemental, o sea cuánto tiempo real toma cada operación básica)
	si n = 100000 y t = 28000 ms
	T(100000) = C * (100000)^2 -> C = 28000 / (100000)^2 =  2.8 * 10^-6 
	 
	Así estimamos que T(1000000) = 2.800.000ms = 46 min y T(10000000) = 280.000.000ms = 77 horas

introsort: 

Notas:
* g++ sorts/heap.cpp sorts/quicksort.cpp main.cpp -o a
* Comprobar por qué los primeros 50 arreglos del quicksort descendente son 100ms más rapidos que el resto de arreglos
* Tener en cuenta: Este heapsort implementa un maxheap y no un minheap como el que muestra el profe en el ppt
* Tener en cuenta que se está usando la flag -O3 al compilar

-- Comparaciones --

Rango de números: 0 - 500.000
Tamaños de arreglos: 10, 100, 1.000, 10.000, 100.000, 1.000.000, 10.000.000 
Cantidad de arreglos testeados por algoritmo: 100

Tiempos promedio (todos en ms):
	- Arreglos Aleatorios:
		- heapSort: 0.00035916, 0.00705996, 0.0830545, 0.757148, 10.3555, 120.858, 1951.9 
		- quickSort: 0.00046356, 0.00578308, 0.0373907, 0.475485, 6.03127, 69.7039, 823.563
		- STL sort: 0.00020951, 0.00424605, 0.0329327, 0.445826, 5.93856, 63.6368, 749.892
		- QuickSortRandom: 0.0048336, 0.0438708,0.340901, 3.65016, 46.016, 382.32, 4022.01
		- mergeinsertionSort: 0.00022564, 0.00218892, 0.0350597, 0.531634, 8.5358, 78.3377, 989.233
		- mergesort: 0.00066872, 0.000401196, 0.0695842, 0.857686, 15.3243, 114.355, 1350.55 
		- insertionSort: 0.00016384, 0.000108353, 0.0783128, 7.04195, 763.41, 76341, 7634100 C = 

	- Arreglos ordenados en orden ascendente: 
		- HeapSort: 
		- QuickSort: 
		- Sort (STL):
		- MergeSort:
		- QuickSortRandom:
		- mergeinsertionSort:
		- mergeSort:
		- InsertionSort:
		
		
	- Arreglos ordenados en orden descendente:
		- HeapSort: 
		- QuickSort: 
		- Sort (STL):
		- MergeSort:
		- QuickSortRandom:
		- mergeinsertionSort:
		- mergeSort:
		- InsertionSort:
		
	- Arreglos con todos los elementos iguales:
		- HeapSort: 
		- QuickSort: 
		- Sort (STL):
		- MergeSort:
		- QuickSortRandom:
		- mergeinsertionSort:
		- mergeSort:
		- InsertionSort:
		
